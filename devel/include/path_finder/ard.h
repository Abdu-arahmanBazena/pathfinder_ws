// Generated by gencpp from file path_finder/ard.msg
// DO NOT EDIT!


#ifndef PATH_FINDER_MESSAGE_ARD_H
#define PATH_FINDER_MESSAGE_ARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_finder
{
template <class ContainerAllocator>
struct ard_
{
  typedef ard_<ContainerAllocator> Type;

  ard_()
    : seq(0)
    , stamp()
    , frame_id()
    , ult_right(0.0)
    , ult_left(0.0)
    , ir_right(0.0)
    , ir_left(0.0)
    , compass_x(0.0)
    , compass_y(0.0)
    , compass_z(0.0)
    , servo_angle(0)  {
    }
  ard_(const ContainerAllocator& _alloc)
    : seq(0)
    , stamp()
    , frame_id(_alloc)
    , ult_right(0.0)
    , ult_left(0.0)
    , ir_right(0.0)
    , ir_left(0.0)
    , compass_x(0.0)
    , compass_y(0.0)
    , compass_z(0.0)
    , servo_angle(0)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef double _ult_right_type;
  _ult_right_type ult_right;

   typedef double _ult_left_type;
  _ult_left_type ult_left;

   typedef double _ir_right_type;
  _ir_right_type ir_right;

   typedef double _ir_left_type;
  _ir_left_type ir_left;

   typedef double _compass_x_type;
  _compass_x_type compass_x;

   typedef double _compass_y_type;
  _compass_y_type compass_y;

   typedef double _compass_z_type;
  _compass_z_type compass_z;

   typedef uint64_t _servo_angle_type;
  _servo_angle_type servo_angle;





  typedef boost::shared_ptr< ::path_finder::ard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_finder::ard_<ContainerAllocator> const> ConstPtr;

}; // struct ard_

typedef ::path_finder::ard_<std::allocator<void> > ard;

typedef boost::shared_ptr< ::path_finder::ard > ardPtr;
typedef boost::shared_ptr< ::path_finder::ard const> ardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_finder::ard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_finder::ard_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_finder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'path_finder': ['/home/abdo/pathfinder_ws/src/path_finder/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_finder::ard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_finder::ard_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_finder::ard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_finder::ard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_finder::ard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_finder::ard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_finder::ard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db57fb1eab133016c7f00c01572b2004";
  }

  static const char* value(const ::path_finder::ard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb57fb1eab133016ULL;
  static const uint64_t static_value2 = 0xc7f00c01572b2004ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_finder::ard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_finder/ard";
  }

  static const char* value(const ::path_finder::ard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_finder::ard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 seq\n\
time stamp\n\
string frame_id\n\
float64 ult_right\n\
float64 ult_left\n\
float64 ir_right\n\
float64 ir_left\n\
float64 compass_x\n\
float64 compass_y\n\
float64 compass_z\n\
uint64 servo_angle\n\
";
  }

  static const char* value(const ::path_finder::ard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_finder::ard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.ult_right);
      stream.next(m.ult_left);
      stream.next(m.ir_right);
      stream.next(m.ir_left);
      stream.next(m.compass_x);
      stream.next(m.compass_y);
      stream.next(m.compass_z);
      stream.next(m.servo_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_finder::ard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_finder::ard_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "ult_right: ";
    Printer<double>::stream(s, indent + "  ", v.ult_right);
    s << indent << "ult_left: ";
    Printer<double>::stream(s, indent + "  ", v.ult_left);
    s << indent << "ir_right: ";
    Printer<double>::stream(s, indent + "  ", v.ir_right);
    s << indent << "ir_left: ";
    Printer<double>::stream(s, indent + "  ", v.ir_left);
    s << indent << "compass_x: ";
    Printer<double>::stream(s, indent + "  ", v.compass_x);
    s << indent << "compass_y: ";
    Printer<double>::stream(s, indent + "  ", v.compass_y);
    s << indent << "compass_z: ";
    Printer<double>::stream(s, indent + "  ", v.compass_z);
    s << indent << "servo_angle: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.servo_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FINDER_MESSAGE_ARD_H
